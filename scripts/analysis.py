import rdflib
import pandas as pd
import os

# =============================================================================
# 1) Define Paths Relative to the Script’s Location
# =============================================================================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# These files should be in the results folder as generated by your build scripts.
CRITICISM_RDF_PATH = os.path.join(BASE_DIR, "../results/criticism_rdf_fixed.ttl")
NOVEL_RDF_PATH = os.path.join(BASE_DIR, "../results/novel_posthumanism_rdf_fixed.ttl")

# =============================================================================
# 2) Load RDF Graphs
# =============================================================================
criticism_graph = rdflib.Graph()
novel_graph = rdflib.Graph()

print("Loading Criticism RDF from:", CRITICISM_RDF_PATH)
criticism_graph.parse(CRITICISM_RDF_PATH, format="turtle")
print(f"Loaded {len(criticism_graph)} triples from Criticism RDF.")

print("Loading Novel RDF from:", NOVEL_RDF_PATH)
novel_graph.parse(NOVEL_RDF_PATH, format="turtle")
print(f"Loaded {len(novel_graph)} triples from Novel RDF.")

# =============================================================================
# 3) Query 1: Concept Counts (for Tables 3 & 4)
# =============================================================================
# This query counts how many times each concept is referenced (via isMentionedIn)
query_concept_counts = """
SELECT ?concept (COUNT(?ref) AS ?mentionCount)
WHERE {
  ?concept <http://example.org/posthuman#isMentionedIn> ?ref .
}
GROUP BY ?concept
ORDER BY DESC(?mentionCount)
"""

print("\nQuerying concept counts for Criticism RDF...")
criticism_counts = criticism_graph.query(query_concept_counts)
criticism_counts_data = [(str(row[0]).split("#")[-1], int(row[1])) for row in criticism_counts]
df_criticism_counts = pd.DataFrame(criticism_counts_data, columns=["Concept", "Criticism Mentions"])

print("Querying concept counts for Novel RDF...")
novel_counts = novel_graph.query(query_concept_counts)
novel_counts_data = [(str(row[0]).split("#")[-1], int(row[1])) for row in novel_counts]
df_novel_counts = pd.DataFrame(novel_counts_data, columns=["Concept", "Novel Mentions"])

# Merge counts for comparison
df_concept_counts = pd.merge(df_criticism_counts, df_novel_counts, on="Concept", how="outer").fillna(0)
print("\n=== Concept Counts (Combined) ===")
print(df_concept_counts)

# =============================================================================
# 4) Query 2: Character-to-Theme Mapping (Table 5)
# =============================================================================
# This query extracts interactions between characters and concepts using relevant predicates.
query_character_mapping = """
SELECT ?character ?relation ?concept
WHERE {
  ?character ?relation ?concept .
  FILTER (?relation IN (
    <http://example.org/posthuman#linkedTo>,
    <http://example.org/posthuman#strugglesWith>,
    <http://example.org/posthuman#exemplifies>,
    <http://example.org/posthuman#contextualizes>
  ))
}
ORDER BY ?character
"""

print("\nQuerying character-to-theme mappings from Novel RDF...")
character_mapping_results = novel_graph.query(query_character_mapping)
character_mapping_data = []
for row in character_mapping_results:
    character = str(row[0]).split("#")[-1]
    relation = str(row[1]).split("#")[-1]
    concept = str(row[2]).split("#")[-1].replace("_", " ")
    character_mapping_data.append((character, relation, concept))

df_character_mapping = pd.DataFrame(character_mapping_data, columns=["Character", "Relation", "Concept"])
print("\n=== Character-to-Theme Mapping ===")
print(df_character_mapping)

# =============================================================================
# 5) Query 3 (Optional): Concept Linkage Analysis
# =============================================================================
query_concept_linkage = """
SELECT ?concept1 ?relation ?concept2
WHERE {
  ?concept1 ?relation ?concept2 .
  FILTER (?relation IN (
    <http://example.org/posthuman#relatedTo>,
    <http://example.org/posthuman#criticizes>,
    <http://example.org/posthuman#extends>
  ))
}
ORDER BY ?concept1
"""

print("\nQuerying concept linkage analysis from Criticism RDF...")
concept_linkage_results = criticism_graph.query(query_concept_linkage)
concept_linkage_data = [(str(row[0]).split("#")[-1],
                         str(row[1]).split("#")[-1],
                         str(row[2]).split("#")[-1].replace("_", " "))
                        for row in concept_linkage_results]
df_concept_linkage = pd.DataFrame(concept_linkage_data, columns=["Concept 1", "Relation", "Concept 2"])
print("\n=== Concept Linkage Analysis ===")
print(df_concept_linkage)

# =============================================================================
# 6) Save Results to CSV Files
# =============================================================================
output_dir = os.path.join(BASE_DIR, "../results/analysis_results")
os.makedirs(output_dir, exist_ok=True)

df_concept_counts.to_csv(os.path.join(output_dir, "concept_counts.csv"), index=False)
df_character_mapping.to_csv(os.path.join(output_dir, "character_theme_mapping.csv"), index=False)
df_concept_linkage.to_csv(os.path.join(output_dir, "concept_linkage_analysis.csv"), index=False)

print("\n✅ Analysis Complete! CSV files saved in:", output_dir)
